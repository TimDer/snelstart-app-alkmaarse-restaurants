@use "sass:map";

// variables
$margin-padding-types: "", "-top", "-right", "-bottom", "-left" !default;
$default-min: 0 !default;
$default-max: 20 !default;
$breakpoints: "mobile", "desktop", "desktop-xl" !default;
$breakpoints-sizes: (
    "mobile": 500px,
    "desktop": 1000px,
    "desktop-xl": 1500px
) !default;

// setup
@mixin _margin-default-style($value, $type: "") {
    .margin#{$type}-#{$value} {
        margin#{$type}: #{$value} !important;
    }
}
@mixin _padding-default-style($value, $type: "") {
    .padding#{$type}-#{$value} {
        padding#{$type}: #{$value} !important;
    }
}
@mixin _margin-style($value, $type: "", $breakpoint) {
    @media (min-width: #{map.get($breakpoints-sizes, $breakpoint)}) {
        .margin-#{$breakpoint}-up#{$type}-#{$value} {
            margin#{$type}: #{$value} !important;
        }
    }
    @media (max-width: #{map.get($breakpoints-sizes, $breakpoint) - 0.02px}) {
        .margin-#{$breakpoint}-down#{$type}-#{$value} {
            margin#{$type}: #{$value} !important;
        }
    }
}
@mixin _padding-style($value, $type: "", $breakpoint) {
    @media (min-width: #{map.get($breakpoints-sizes, $breakpoint)}) {
        .padding-#{$breakpoint}-up#{$type}-#{$value} {
            padding#{$type}: #{$value} !important;
        }
    }
    @media (max-width: #{map.get($breakpoints-sizes, $breakpoint) - 0.02px}) {
        .padding-#{$breakpoint}-down#{$type}-#{$value} {
            padding#{$type}: #{$value} !important;
        }
    }
}
@mixin _margin-padding-style($value, $type: "", $margin-or-padding: "margin-padding", $breakpoint: "") {
    @if ($margin-or-padding == "margin-padding") {
        @include _margin-style($value, $type, $breakpoint);
        @include _padding-style($value, $type, $breakpoint);
    }
    @else if ($margin-or-padding == "margin") {
        @include _margin-style($value, $type, $breakpoint);
    }
    @else if ($margin-or-padding == "padding") {
        @include _padding-style($value, $type, $breakpoint);
    }
}
@mixin _margin-padding-defualt-style($value, $type: "", $margin-or-padding: "margin-padding") {
    @if ($margin-or-padding == "margin-padding") {
        @include _margin-default-style($value, $type);
        @include _padding-default-style($value, $type);
    }
    @else if ($margin-or-padding == "margin") {
        @include _margin-default-style($value, $type);
    }
    @else if ($margin-or-padding == "padding") {
        @include _padding-default-style($value, $type);
    }
}
@mixin _margin-padding-loop($max: $default-max, $min: $default-min) {
    @for $value from $min through $max {
        @content($value);
    }
}
@mixin _choose($value, $margin-or-padding, $default, $breakpoint: "") {
    @each $type in $margin-padding-types {
        @if ($default) {
            @include _margin-padding-defualt-style($value + "px",
                                                    $type,
                                                    $margin-or-padding);
        }
        @else {
            @include _margin-padding-style($value + "px",
                                            $type,
                                            $margin-or-padding,
                                            $breakpoint);
        }
    }
}

// return
@mixin margin($max: $default-max, $min: $default-min) {
    @include _margin-padding-loop($max, $min) using ($value) {
        @include _choose($value, "margin", true);
    }

    @each $breakpoint in $breakpoints {
        @include _margin-padding-loop($max, $min) using ($value) {
            @include _choose($value, "margin", false, $breakpoint);
        }
    }
}
@mixin padding($max: $default-max, $min: $default-min) {
    @include _margin-padding-loop($max, $min) using ($value) {
        @include _choose($value, "padding", true);
    }

    @each $breakpoint in $breakpoints {
        @include _margin-padding-loop($max, $min) using ($value) {
            @include _choose($value, "padding", false, $breakpoint);
        }
    }
}
@mixin margin-padding($max: $default-max, $min: $default-min) {
    @include _margin-padding-loop($max, $min) using ($value) {
        @include _choose($value, "margin-padding", true);
    }

    @each $breakpoint in $breakpoints {
        @include _margin-padding-loop($max, $min) using ($value) {
            @include _choose($value, "margin-padding", false, $breakpoint);
        }
    }
}
